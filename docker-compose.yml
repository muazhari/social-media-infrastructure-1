services:
  gateway-1:
    image: nginx:latest
    ports:
      - "${GATEWAY_1_PORT}:80"
    volumes:
      - ${GATEWAY_1_PATH}:/app
      - ./nginx.conf:/etc/nginx/nginx.conf
  router-1:
    image: ghcr.io/wundergraph/cosmo/router:latest
    ports:
      - "${ROUTER_1_PORT}:3002"
    working_dir: /app
    env_file:
      - ./.env
    volumes:
      - ${ROUTER_1_PATH}:/app
  frontend-1:
    image: node:latest
    ports:
      - "${FRONTEND_1_PORT}:3000"
    working_dir: /app
    command:
      - npm
      - run
      - dev
    env_file:
      - ./.env
    volumes:
      - ${FRONTEND_1_PATH}:/app
  backend-1:
    image: golang:latest
    ports:
      - "${BACKEND_1_PORT}:8081"
    working_dir: /app
    command:
      - go
      - run
      - ./internal/main.go
    env_file:
      - ./.env
    volumes:
      - ${BACKEND_1_PATH}:/app
  backend-2:
    image: gradle:latest
    ports:
      - "${BACKEND_2_PORT}:8082"
    working_dir: /app
    command: 
      - gradle
      - bootRun
    env_file:
      - ./.env
    volumes:
      - ${BACKEND_2_PATH}:/app
  datastore-1:
    image: redis/redis-stack-server:latest
    ports:
      - "${DATASTORE_1_PORT}:6379"
    environment:
      - REDIS_ARGS=--requirepass ${DATASTORE_2_PASSWORD}
    volumes:
      - ./volumes/datastore-1:/data
  datastore-2:
    image: postgis/postgis:latest
    ports:
      - "${DATASTORE_2_PORT}:5432"
    environment:
      POSTGRES_USER: ${DATASTORE_2_USER}
      POSTGRES_PASSWORD: ${DATASTORE_2_PASSWORD}
      POSTGRES_DB: ${DATASTORE_2_DATABASE}
      PGDATA: /var/lib/pg_data
    volumes:
      - ./migration-2.sql:/docker-entrypoint-initdb.d/migration-2.sql
      - ./volumes/datastore-2:/var/lib/postgresql/data
  datastore-3:
    image: postgis/postgis:latest
    ports:
      - "${DATASTORE_3_PORT}:5432"
    environment:
      POSTGRES_USER: ${DATASTORE_3_USER}
      POSTGRES_PASSWORD: ${DATASTORE_3_PASSWORD}
      POSTGRES_DB: ${DATASTORE_3_DATABASE}
      PGDATA: /var/lib/pg_data
    volumes:
      - ./migration-3.sql:/docker-entrypoint-initdb.d/migration-3.sql
      - ./volumes/datastore-3:/var/lib/postgresql/data
  datastore-4:
    image: minio/minio:latest
    ports:
      - "${DATASTORE_4_PORT}:9000"
      - "${DATASTORE_4_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${DATASTORE_4_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${DATASTORE_4_ROOT_PASSWORD}
    volumes:
      - ./volumes/datastore-4:/minio
    entrypoint: [ "minio" ]
    command:
      - server
      - /minio
      - --console-address
      - :9001
  datastore-5:
    image: apache/kafka:latest
    ports:
      - "${DATASTORE_5_PORT}:9094"
    environment:
      - KAFKA_NODE_ID=0
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://datastore-5:9092,EXTERNAL://localhost:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=0@datastore-5:9093
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
  kafka-ui-1:
    image: provectuslabs/kafka-ui:latest
    ports:  
      - "${KAFKA_UI_1_PORT}:8080"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=datastore-5
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=datastore-5:9092
      - KAFKA_CLUSTERS_0_READONLY=false
  