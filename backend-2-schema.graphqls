scalar Upload

type ChatMessage @key(fields: "id") {
    id: ID!
    content: String!
    accountId: ID!
    room: ChatRoom!
}

type ChatRoomMember @key(fields: "id") {
    id: ID!
    accountId: ID!
    room: ChatRoom!
}

type ChatRoom @key(fields: "id") {
    id: ID!
    name: String!
    description: String
    members: [ChatRoomMember]
    messages: [ChatMessage]
}

type Post @key(fields: "id") {
    id: ID!
    imageUrl: String
    title: String!
    content: String!
    accountId: ID!
    likes: [PostLike]
}

type PostLike @key(fields: "id") {
    id: ID!
    post: Post!
    accountId: ID!
}

type Account @key(fields: "id") @extends {
    id: ID!
    messages: [ChatMessage]
    rooms: [ChatRoom]
    posts: [Post]
    postLikes: [PostLike]
}

input ChatRoomInput {
    name: String!
    description: String
}

input ChatRoomMemberInput {
    accountId: ID
    chatRoomId: ID!
}

input ChatMessageInput {
    chatRoomId: ID!
    accountId: ID
    content: String!
}

input PostInput {
    accountId: ID
    title: String!
    content: String!
    image: Upload
}

input PostLikeInput {
    postId: ID!
    accountId: ID
}

type Query {
    chatRooms: [ChatRoom]
    chatRoomMembers(chatRoomId: ID!): [ChatRoomMember]
    chatMessages(chatRoomId: ID!): [ChatMessage]
    posts: [Post]
    myPosts: [Post]
    myChatRooms: [ChatRoom]
}

type Mutation {
    addChatRoom(input: ChatRoomInput!): ChatRoom
    addMemberToChatRoom(input: ChatRoomMemberInput!): ChatRoomMember
    addChatMessage(input: ChatMessageInput!): ChatMessage
    addPost(input: PostInput!): Post
    likePost(input: PostLikeInput!): PostLike
    unlikePost(input: PostLikeInput!): PostLike
}
